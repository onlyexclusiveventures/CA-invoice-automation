import requests
import json

# Notion API Credentials
NOTION_API_KEY = "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"
SOURCE_DB_ID = "151404f6b69e81158d0de23c708168d4"  # (t) (CA) - Invoices
TARGET_DB_ID = "155404f6b69e80f7a0a5db58eda0c82a"  # Employee Finance Database or OEV Invoices

headers = {
    "Authorization": f"Bearer {NOTION_API_KEY}",
    "Notion-Version": "2022-06-28",
    "Content-Type": "application/json"
}

def get_ready_invoices():
    url = f"https://api.notion.com/v1/databases/{SOURCE_DB_ID}/query"
    payload = {
        "filter": {
            "property": "Status",
            "status": {
                "equals": "Payment Processing"
            }
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    return response.json().get("results", [])

def transfer_invoice_data(invoice):
    url = f"https://api.notion.com/v1/pages"
    properties = invoice['properties']
    
    new_entry = {
        "parent": {"database_id": TARGET_DB_ID},
        "properties": {
            "Invoice ID": {"title": [{"text": {"content": properties["Invoice ID"]["title"][0]["text"]["content"]}}]},
            "Status": {"status": {"name": properties["Status"]["status"]["name"]}},
            "Date Issued": {"date": {"start": properties["Date Issued"]["date"]["start"]}},
            "Date Due": {"date": {"start": properties["Date Due"]["date"]["start"]}},
            "Employee": {"relation": [{"id": properties["Employee"]["relation"][0]["id"]}]},
            "Employer": {"relation": [{"id": properties["Employer"]["relation"][0]["id"]}]},
            "Sum": {"number": properties["Sum"]["number"]},
            "Service Period": {"rich_text": [{"text": {"content": properties["Service Period"]["rich_text"][0]["text"]["content"]}}]},
            "Due Status": {"rich_text": [{"text": {"content": properties["Due Status"]["rich_text"][0]["text"]["content"]}}]}
        }
    }

    response = requests.post(url, headers=headers, json=new_entry)
    return response.status_code

# Main Workflow
invoices = get_ready_invoices()
for invoice in invoices:
    status_code = transfer_invoice_data(invoice)
    if status_code == 200:
        print("Invoice transferred successfully.")
    else:
        print("Error transferring invoice.")
